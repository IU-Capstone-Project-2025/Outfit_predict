name: CD - Deploy to Production

on:
  push:
    branches: [main]
  workflow_dispatch:  # Allow manual deployment

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_BACKEND: ${{ github.repository }}/backend
  IMAGE_NAME_FRONTEND: ${{ github.repository }}/frontend

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        lfs: true  # Important for model files

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata for backend
      id: meta-backend
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}
        tags: |
          type=ref,event=branch
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Extract metadata for frontend
      id: meta-frontend
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}
        tags: |
          type=ref,event=branch
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push backend image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        platforms: linux/amd64
        push: true
        tags: ${{ steps.meta-backend.outputs.tags }}
        labels: ${{ steps.meta-backend.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        platforms: linux/amd64
        push: true
        tags: ${{ steps.meta-frontend.outputs.tags }}
        labels: ${{ steps.meta-frontend.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          NEXT_PUBLIC_API_URL=${{ secrets.NEXT_PUBLIC_API_URL }}

    - name: Deploy to production server
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.DEPLOY_HOST }}
        username: ${{ secrets.DEPLOY_USER }}
        key: ${{ secrets.DEPLOY_SSH_KEY }}
        script: |
          # Navigate to project directory
          cd /home/${{ secrets.DEPLOY_USER }}/Outfit_predict

          # Pull latest changes
          git pull origin main
          git lfs pull

          # Login to container registry
          echo ${{ secrets.GITHUB_TOKEN }} | docker login ${{ env.REGISTRY }} -u ${{ github.actor }} --password-stdin

          # Update images in docker-compose
          export BACKEND_IMAGE="${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}:latest"
          export FRONTEND_IMAGE="${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}:latest"

          # Pull new images
          docker pull $BACKEND_IMAGE
          docker pull $FRONTEND_IMAGE

          # Update docker-compose to use new images
          sed -i "s|build: ./backend|image: $BACKEND_IMAGE|g" docker-compose.yml
          sed -i "s|build:.*context: ./frontend.*|image: $FRONTEND_IMAGE|g" docker-compose.yml
          sed -i "/args:/d" docker-compose.yml
          sed -i "/NEXT_PUBLIC_API_URL:/d" docker-compose.yml

          # Recreate containers with new images
          docker-compose pull
          docker-compose up -d --force-recreate

          # Clean up old images
          docker image prune -f

          # Show running containers
          docker-compose ps

    - name: Health Check
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.DEPLOY_HOST }}
        username: ${{ secrets.DEPLOY_USER }}
        key: ${{ secrets.DEPLOY_SSH_KEY }}
        script: |
          # Wait for services to be ready
          sleep 30

          # Check if services are running
          if ! curl -f http://localhost:3000 > /dev/null 2>&1; then
            echo "Frontend health check failed"
            exit 1
          fi

          if ! curl -f http://localhost:8000/health > /dev/null 2>&1; then
            echo "Backend health check failed"
            exit 1
          fi

          echo "All services are healthy!"

    - name: Notify deployment status
      if: always()
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
