name: CI - Code Quality & Security

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  PYTHON_VERSION: "3.12"
  NODE_VERSION: "20"

jobs:
  # ==================== Code Quality & Linting ====================
  code-quality:
    name: Code Quality & Linting
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Needed for SonarCloud

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: npm
        cache-dependency-path: frontend/package-lock.json

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r backend/requirements.txt
        pip install pre-commit ruff black isort mypy bandit safety

    - name: Install Node dependencies
      working-directory: frontend
      run: npm ci

    - name: Run pre-commit hooks
      run: |
        pre-commit run --all-files --show-diff-on-failure

    - name: Python linting with Ruff
      run: |
        ruff check backend/ --output-format=github

    - name: Python type checking with MyPy
      run: |
        mypy backend/ --ignore-missing-imports --show-error-codes

    - name: Frontend linting
      working-directory: frontend
      run: |
        npm run lint

    - name: Frontend type checking
      working-directory: frontend
      run: |
        npm run type-check

  # ==================== Security Scanning ====================
  security:
    name: Security Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety semgrep

    - name: Python security scanning with Bandit
      run: |
        bandit -r backend/ -f json -o bandit-report.json || true
        bandit -r backend/ -f txt

    - name: Python dependency vulnerability check
      run: |
        safety check --json --output safety-report.json || true
        safety check

    - name: Semgrep security analysis
      run: |
        semgrep --config=auto backend/ --json --output=semgrep-report.json || true
        semgrep --config=auto backend/

    - name: Upload security reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json
          semgrep-report.json

  # ==================== Testing ====================
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_outfit
        ports: ["5432:5432"]
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

      redis:
        image: redis:7
        ports: ["6379:6379"]
        options: >-
          --health-cmd="redis-cli ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    env:
      DATABASE_URL: postgresql+asyncpg://postgres:postgres@localhost:5432/test_outfit
      REDIS_URL: redis://localhost:6379
      TESTING: true
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin
      MINIO_ENDPOINT: localhost:9000
      MINIO_BUCKET: test-bucket

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: npm
        cache-dependency-path: frontend/package-lock.json

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r backend/requirements.txt
        pip install pytest pytest-asyncio pytest-cov httpx

    - name: Install Node dependencies
      working-directory: frontend
      run: npm ci

    - name: Run Python tests
      working-directory: backend
      run: |
        if [ -d "tests" ]; then
          pytest tests/ -v --cov=app --cov-report=xml --cov-report=html
        else
          echo "No tests directory found, skipping Python tests"
          mkdir -p coverage
          echo "No tests available" > coverage/coverage.xml
        fi

    - name: Run Frontend tests
      working-directory: frontend
      run: |
        if npm run test --if-present; then
          echo "Frontend tests passed"
        else
          echo "No frontend tests configured or tests failed"
        fi

    - name: Upload test coverage
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-coverage
        path: |
          backend/coverage/
          frontend/coverage/

  # ==================== Docker Build & Scan ====================
  docker:
    name: Docker Build & Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build backend image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        file: ./backend/Dockerfile
        push: false
        tags: outfit-predict-backend:test
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        file: ./frontend/Dockerfile
        push: false
        tags: outfit-predict-frontend:test
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          NEXT_PUBLIC_API_URL=http://localhost:8000

    - name: Run Trivy vulnerability scanner on backend
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: outfit-predict-backend:test
        format: 'sarif'
        output: 'backend-trivy-results.sarif'

    - name: Run Trivy vulnerability scanner on frontend
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: outfit-predict-frontend:test
        format: 'sarif'
        output: 'frontend-trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: docker-security-reports
        path: |
          backend-trivy-results.sarif
          frontend-trivy-results.sarif

  # ==================== Performance & Load Testing ====================
  performance:
    name: Performance Testing
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: perf_test
        ports: ["5432:5432"]
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r backend/requirements.txt
        pip install locust

    - name: Run basic load test
      working-directory: backend
      run: |
        if [ -f "locustfile.py" ]; then
          # Start the application in background
          uvicorn app.main:app --host 0.0.0.0 --port 8000 &
          APP_PID=$!
          
          # Wait for app to start
          sleep 10
          
          # Run load test
          locust --headless --users 10 --spawn-rate 2 --run-time 30s --host http://localhost:8000
          
          # Clean up
          kill $APP_PID
        else
          echo "No locustfile.py found, skipping performance tests"
        fi

  # ==================== Code Quality Gates ====================
  quality-gate:
    name: Quality Gate
    runs-on: ubuntu-latest
    needs: [code-quality, security, test, docker]
    if: always()
    
    steps:
    - name: Check job results
      run: |
        echo "Code Quality: ${{ needs.code-quality.result }}"
        echo "Security: ${{ needs.security.result }}"
        echo "Tests: ${{ needs.test.result }}"
        echo "Docker: ${{ needs.docker.result }}"
        
        if [[ "${{ needs.code-quality.result }}" != "success" ]]; then
          echo "❌ Code quality checks failed"
          exit 1
        fi
        
        if [[ "${{ needs.security.result }}" != "success" ]]; then
          echo "⚠️ Security checks failed"
          # Don't fail the build for security warnings, but log them
        fi
        
        if [[ "${{ needs.test.result }}" != "success" ]]; then
          echo "❌ Tests failed"
          exit 1
        fi
        
        if [[ "${{ needs.docker.result }}" != "success" ]]; then
          echo "❌ Docker build failed"
          exit 1
        fi
        
        echo "✅ All quality gates passed!"

    - name: Comment PR with results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const results = {
            'Code Quality': '${{ needs.code-quality.result }}',
            'Security': '${{ needs.security.result }}',
            'Tests': '${{ needs.test.result }}',
            'Docker': '${{ needs.docker.result }}'
          };
          
          let status = '✅ All checks passed!';
          let details = '';
          
          for (const [check, result] of Object.entries(results)) {
            const emoji = result === 'success' ? '✅' : result === 'failure' ? '❌' : '⚠️';
            details += `${emoji} ${check}: ${result}\n`;
            if (result === 'failure') {
              status = '❌ Some checks failed';
            }
          }
          
          const body = `## CI Results\n\n${status}\n\n### Details:\n${details}\n\n---\n*This comment was automatically generated by the CI pipeline*`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: body
          }); 